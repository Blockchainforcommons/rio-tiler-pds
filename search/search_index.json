{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rio-Tiler-PDS: A rio-tiler plugin for Public Datasets \u00b6 A rio-tiler plugin to read from publicly-available datasets. Important This is the new module for rio-tiler missions specific (ref: cogeotiff/rio-tiler#195 ) Documentation : cogeotiff.github.io/rio-tiler-pds/ Source Code : cogeotiff/rio-tiler-pds Installation \u00b6 You can install rio-tiler-pds using pip $ pip install -U pip $ pip install rio-tiler-pds or install from source: $ pip install -U pip $ pip install git+https://github.com/cogeotiff/rio-tiler-pds.git Datasets \u00b6 Data Level/Product Format Owner Region Bucket Type Link Sentinel 2 L1C JPEG2000 Sinergise / AWS eu-central-1 Requester-pays registry.opendata.aws/sentinel-2/ Sentinel 2 L2A JPEG2000 Sinergise / AWS eu-central-1 Requester-pays registry.opendata.aws/sentinel-2/ Sentinel 2 L2A COG Digital Earth Africa / AWS us-west-2 Public www.digitalearthafrica.org/news/operational-and-ready-use-satellite-data-now-available-across-africa Sentinel 1 L1C COG (Internal GCPS) Sinergise / AWS eu-central-1 Requester-pays registry.opendata.aws/sentinel-1/ Landsat 8 L1 GTiff (External Overviews) Planet / AWS us-west-2 Public registry.opendata.aws/landsat-8/ CBERS 4/4A L2/L4 COG AMS Kepler / AWS us-east-1 Requester-pays registry.opendata.aws/cbers/ MODIS (modis-pds) MCD43A4, MOD09GQ, MYD09GQ, MOD09GA, MYD09GA GTiff (External Overviews) - us-west-2 Public docs.opendata.aws/modis-pds/readme.html MODIS (astraea-opendata) MCD43A4, MOD11A1, MOD13A1, MYD11A1 MYD13A1 COG Astraea / AWS us-west-2 Requester-pays registry.opendata.aws/modis-astraea/ Adding more dataset : If you know of another publicly-available dataset that can easily be described with a \"scene id\", please feel free to open an issue . Warnings \u00b6 Requester-pays Buckets \u00b6 On AWS, sentinel2 , sentinel1 , cbers and modis (in astraea-opendata) datasets are stored in requester pays buckets. This means that the cost of GET and LIST requests and egress fees for downloading files outside the AWS region will be charged to the accessing users , not the organization hosting the bucket. For rio-tiler and rio-tiler-pds to work with such buckets, you'll need to set AWS_REQUEST_PAYER=\"requester\" in your shell environment. Partial reading on Cloud hosted dataset \u00b6 When reading data, rio-tiler-pds performs partial reads when possible. Hence performance will be best on data stored as Cloud Optimized GeoTIFF (COG) . It's important to note that Sentinel-2 scenes hosted on AWS are not in Cloud Optimized format but in JPEG2000 . Partial reads from JPEG2000 files are inefficient, and GDAL (the library underlying rio-tiler-pds and rasterio ) will need to make many GET requests and transfer a lot of data. This will be both slow and expensive, since AWS's JPEG2000 collection of Sentinel 2 data is stored in a requester pays bucket. Ref: Do you really want people using your data blog post. Overview \u00b6 Readers \u00b6 Each dataset has its own submodule (e.g sentinel2: rio_tiler_pds.sentinel.aws ) from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.sentinel.aws import S1L1CReader from rio_tiler_pds.sentinel.aws import ( S2L1CReader , # JPEG2000 S2L2AReader , # JPEG2000 S2L2ACOGReader , # COG ) from rio_tiler_pds.cbers.aws import CBERSReader from rio_tiler_pds.modis.aws import MODISPDSReader , MODISASTRAEAReader All Readers are subclass of rio_tiler.io.BaseReader and inherit its properties/methods. Properties \u00b6 bounds : Scene bounding box minzoom : WebMercator MinZoom (e.g 7 for Landsat8) maxzoom : WebMercator MaxZoom (e.g 12 for Landsat8) center : Scene center spatial_info : zooms, bounds and center Methods \u00b6 info : Returns band's simple info (e.g nodata, band_descriptions, ....) stats : Returns band's statistics (percentile, histogram, ...) metadata : info + stats tile : Read web mercator map tile from bands part : Extract part of bands preview : Returns a low resolution preview from bands point : Returns band's pixel value for a given lon,lat Other \u00b6 bands (property): List of available bands for each dataset Scene ID \u00b6 All readers take scene id as main input. The scene id is used internaly by the reader to derive the full path of the data. e.g: Landsat on AWS Because the Landsat AWS PDS follows a regular schema to store the data ( s3://{bucket}/c1/L8/{path}/{row}/{scene}/{scene}_{band}.TIF\" ), we can easily reconstruct the full band's path by parsing the scene id. from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.landsat.utils import sceneid_parser sceneid_parser ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) > { 'sensor' : 'C' , 'satellite' : '08' , 'processingCorrectionLevel' : 'L1TP' , 'path' : '016' , 'row' : '037' , 'acquisitionYear' : '2017' , 'acquisitionMonth' : '08' , 'acquisitionDay' : '13' , 'processingYear' : '2017' , 'processingMonth' : '08' , 'processingDay' : '14' , 'collectionNumber' : '01' , 'collectionCategory' : 'RT' , 'scene' : 'LC08_L1TP_016037_20170813_20170814_01_RT' , 'date' : '2017-08-13' } with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : print ( landsat . _get_band_url ( \"B1\" )) > s3 : // landsat - pds / c1 / L8 / 016 / 037 / LC08_L1TP_016037_20170813_20170814_01_RT / LC08_L1TP_016037_20170813_20170814_01_RT_B1 . TIF Each dataset has a specific scene id format: Scene ID formats Landsat link: rio_tiler_pds.landsat.utils.sceneid_parser regex: ^L[COTEM]0[0-9]_L\\d{1}[A-Z]{2}_\\d{6}_\\d{8}_\\d{8}_\\d{2}_(T1|T2|RT)$ example: LC08_L1TP_016037_20170813_20170814_01_RT Sentinel 1 L1C link: rio_tiler_pds.sentinel.utils.s1_sceneid_parser regex: ^S1[AB]_(IW)|(EW)_[A-Z]{3}[FHM]_[0-9][SA][A-Z]{2}_[0-9]{8}T[0-9]{6}_[0-9]{8}T[0-9]{6}_[0-9A-Z]{6}_[0-9A-Z]{6}_[0-9A-Z]{4}$ example: S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B Sentinel 2 JPEG2000 and Sentinel 2 COG link: rio_tiler_pds.sentinel.utils.s2_sceneid_parser regex: ^S2[AB]_[0-9]{2}[A-Z]{3}_[0-9]{8}_[0-9]_L[0-2][A-C]$ or ^S2[AB]_L[0-2][A-C]_[0-9]{8}_[0-9]{2}[A-Z]{3}_[0-9]$ example: S2A_29RKH_20200219_0_L2A , S2A_L1C_20170729_19UDP_0 , S2A_L2A_20170729_19UDP_0 CBERS link: rio_tiler_pds.cbers.utils.sceneid_parser regex: ^CBERS_(4|4A)_\\w+_[0-9]{8}_[0-9]{3}_[0-9]{3}_L\\w+$ example: CBERS_4_MUX_20171121_057_094_L2 , CBERS_4_AWFI_20170420_146_129_L2 , CBERS_4_PAN10M_20170427_161_109_L4 , CBERS_4_PAN5M_20170425_153_114_L4 , CBERS_4A_WPM_20200730_209_139_L4 MODIS (PDS and Astraea) link: rio_tiler_pds.modis.utils.sceneid_parser regex: ^M[COY]D[0-9]{2}[A-Z0-9]{2}\\.A[0-9]{4}[0-9]{3}\\.h[0-9]{2}v[0-9]{2}\\.[0-9]{3}\\.[0-9]{13}$ example: MCD43A4.A2017006.h21v11.006.2017018074804 Band Per Asset/File \u00b6 rio-tiler-pds Readers assume that bands (e.g eo:band in STAC) are stored in separate files. $ aws s3 ls landsat-pds/c1/L8/013/031/LC08_L1TP_013031_20130930_20170308_01_T1/ LC08_L1TP_013031_20130930_20170308_01_T1_B1.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B10.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B11.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B2.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B3.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B4.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B5.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B6.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B7.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B8.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B9.TIF LC08_L1TP_013031_20130930_20170308_01_T1_BQA.TIF When reading data or metadata, readers will merge them. e.g with S2L1CReader ( \"S2A_L1C_20170729_19UDP_0\" ) as sentinel : tile , mask = sentinel . tile ( 77 , 89 , 8 , bands = ( \"B01\" , \"B02\" ) assert tile . shape == ( 2 , 256 , 256 ) print ( sentinel . stats ( bands = ( \"B8A\" , \"B02\" ))) > { 'B8A' : { 'pc' : [ 106 , 9322 ], 'min' : 1 , 'max' : 13659 , 'std' : 2682.6511198930048 , 'histogram' : [ [ 261631 , 52188 , 137746 , 98039 , 41066 , 30818 , 21095 , 8631 , 1442 , 105 ], [ 1.0 , 1366.8 , 2732.6 , 4098.4 , 5464.2 , 6830.0 , 8195.8 , 9561.6 , 10927.4 , 12293.199999999999 , 13659.0 ] ] }, 'B02' : { ... } } Changes \u00b6 See CHANGES.md . Contribution & Development \u00b6 See CONTRIBUTING.md License \u00b6 See LICENSE.txt Authors \u00b6 The rio-tiler project was begun at Mapbox and has been transferred in January 2019. See AUTHORS.txt for a listing of individual contributors.","title":"Home"},{"location":"#rio-tiler-pds-a-rio-tiler-plugin-for-public-datasets","text":"A rio-tiler plugin to read from publicly-available datasets. Important This is the new module for rio-tiler missions specific (ref: cogeotiff/rio-tiler#195 ) Documentation : cogeotiff.github.io/rio-tiler-pds/ Source Code : cogeotiff/rio-tiler-pds","title":"Rio-Tiler-PDS: A rio-tiler plugin for Public Datasets"},{"location":"#installation","text":"You can install rio-tiler-pds using pip $ pip install -U pip $ pip install rio-tiler-pds or install from source: $ pip install -U pip $ pip install git+https://github.com/cogeotiff/rio-tiler-pds.git","title":"Installation"},{"location":"#datasets","text":"Data Level/Product Format Owner Region Bucket Type Link Sentinel 2 L1C JPEG2000 Sinergise / AWS eu-central-1 Requester-pays registry.opendata.aws/sentinel-2/ Sentinel 2 L2A JPEG2000 Sinergise / AWS eu-central-1 Requester-pays registry.opendata.aws/sentinel-2/ Sentinel 2 L2A COG Digital Earth Africa / AWS us-west-2 Public www.digitalearthafrica.org/news/operational-and-ready-use-satellite-data-now-available-across-africa Sentinel 1 L1C COG (Internal GCPS) Sinergise / AWS eu-central-1 Requester-pays registry.opendata.aws/sentinel-1/ Landsat 8 L1 GTiff (External Overviews) Planet / AWS us-west-2 Public registry.opendata.aws/landsat-8/ CBERS 4/4A L2/L4 COG AMS Kepler / AWS us-east-1 Requester-pays registry.opendata.aws/cbers/ MODIS (modis-pds) MCD43A4, MOD09GQ, MYD09GQ, MOD09GA, MYD09GA GTiff (External Overviews) - us-west-2 Public docs.opendata.aws/modis-pds/readme.html MODIS (astraea-opendata) MCD43A4, MOD11A1, MOD13A1, MYD11A1 MYD13A1 COG Astraea / AWS us-west-2 Requester-pays registry.opendata.aws/modis-astraea/ Adding more dataset : If you know of another publicly-available dataset that can easily be described with a \"scene id\", please feel free to open an issue .","title":"Datasets"},{"location":"#warnings","text":"","title":"Warnings"},{"location":"#requester-pays-buckets","text":"On AWS, sentinel2 , sentinel1 , cbers and modis (in astraea-opendata) datasets are stored in requester pays buckets. This means that the cost of GET and LIST requests and egress fees for downloading files outside the AWS region will be charged to the accessing users , not the organization hosting the bucket. For rio-tiler and rio-tiler-pds to work with such buckets, you'll need to set AWS_REQUEST_PAYER=\"requester\" in your shell environment.","title":"Requester-pays Buckets"},{"location":"#partial-reading-on-cloud-hosted-dataset","text":"When reading data, rio-tiler-pds performs partial reads when possible. Hence performance will be best on data stored as Cloud Optimized GeoTIFF (COG) . It's important to note that Sentinel-2 scenes hosted on AWS are not in Cloud Optimized format but in JPEG2000 . Partial reads from JPEG2000 files are inefficient, and GDAL (the library underlying rio-tiler-pds and rasterio ) will need to make many GET requests and transfer a lot of data. This will be both slow and expensive, since AWS's JPEG2000 collection of Sentinel 2 data is stored in a requester pays bucket. Ref: Do you really want people using your data blog post.","title":"Partial reading on Cloud hosted dataset"},{"location":"#overview","text":"","title":"Overview"},{"location":"#readers","text":"Each dataset has its own submodule (e.g sentinel2: rio_tiler_pds.sentinel.aws ) from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.sentinel.aws import S1L1CReader from rio_tiler_pds.sentinel.aws import ( S2L1CReader , # JPEG2000 S2L2AReader , # JPEG2000 S2L2ACOGReader , # COG ) from rio_tiler_pds.cbers.aws import CBERSReader from rio_tiler_pds.modis.aws import MODISPDSReader , MODISASTRAEAReader All Readers are subclass of rio_tiler.io.BaseReader and inherit its properties/methods.","title":"Readers"},{"location":"#properties","text":"bounds : Scene bounding box minzoom : WebMercator MinZoom (e.g 7 for Landsat8) maxzoom : WebMercator MaxZoom (e.g 12 for Landsat8) center : Scene center spatial_info : zooms, bounds and center","title":"Properties"},{"location":"#methods","text":"info : Returns band's simple info (e.g nodata, band_descriptions, ....) stats : Returns band's statistics (percentile, histogram, ...) metadata : info + stats tile : Read web mercator map tile from bands part : Extract part of bands preview : Returns a low resolution preview from bands point : Returns band's pixel value for a given lon,lat","title":"Methods"},{"location":"#other","text":"bands (property): List of available bands for each dataset","title":"Other"},{"location":"#scene-id","text":"All readers take scene id as main input. The scene id is used internaly by the reader to derive the full path of the data. e.g: Landsat on AWS Because the Landsat AWS PDS follows a regular schema to store the data ( s3://{bucket}/c1/L8/{path}/{row}/{scene}/{scene}_{band}.TIF\" ), we can easily reconstruct the full band's path by parsing the scene id. from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.landsat.utils import sceneid_parser sceneid_parser ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) > { 'sensor' : 'C' , 'satellite' : '08' , 'processingCorrectionLevel' : 'L1TP' , 'path' : '016' , 'row' : '037' , 'acquisitionYear' : '2017' , 'acquisitionMonth' : '08' , 'acquisitionDay' : '13' , 'processingYear' : '2017' , 'processingMonth' : '08' , 'processingDay' : '14' , 'collectionNumber' : '01' , 'collectionCategory' : 'RT' , 'scene' : 'LC08_L1TP_016037_20170813_20170814_01_RT' , 'date' : '2017-08-13' } with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : print ( landsat . _get_band_url ( \"B1\" )) > s3 : // landsat - pds / c1 / L8 / 016 / 037 / LC08_L1TP_016037_20170813_20170814_01_RT / LC08_L1TP_016037_20170813_20170814_01_RT_B1 . TIF Each dataset has a specific scene id format: Scene ID formats Landsat link: rio_tiler_pds.landsat.utils.sceneid_parser regex: ^L[COTEM]0[0-9]_L\\d{1}[A-Z]{2}_\\d{6}_\\d{8}_\\d{8}_\\d{2}_(T1|T2|RT)$ example: LC08_L1TP_016037_20170813_20170814_01_RT Sentinel 1 L1C link: rio_tiler_pds.sentinel.utils.s1_sceneid_parser regex: ^S1[AB]_(IW)|(EW)_[A-Z]{3}[FHM]_[0-9][SA][A-Z]{2}_[0-9]{8}T[0-9]{6}_[0-9]{8}T[0-9]{6}_[0-9A-Z]{6}_[0-9A-Z]{6}_[0-9A-Z]{4}$ example: S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B Sentinel 2 JPEG2000 and Sentinel 2 COG link: rio_tiler_pds.sentinel.utils.s2_sceneid_parser regex: ^S2[AB]_[0-9]{2}[A-Z]{3}_[0-9]{8}_[0-9]_L[0-2][A-C]$ or ^S2[AB]_L[0-2][A-C]_[0-9]{8}_[0-9]{2}[A-Z]{3}_[0-9]$ example: S2A_29RKH_20200219_0_L2A , S2A_L1C_20170729_19UDP_0 , S2A_L2A_20170729_19UDP_0 CBERS link: rio_tiler_pds.cbers.utils.sceneid_parser regex: ^CBERS_(4|4A)_\\w+_[0-9]{8}_[0-9]{3}_[0-9]{3}_L\\w+$ example: CBERS_4_MUX_20171121_057_094_L2 , CBERS_4_AWFI_20170420_146_129_L2 , CBERS_4_PAN10M_20170427_161_109_L4 , CBERS_4_PAN5M_20170425_153_114_L4 , CBERS_4A_WPM_20200730_209_139_L4 MODIS (PDS and Astraea) link: rio_tiler_pds.modis.utils.sceneid_parser regex: ^M[COY]D[0-9]{2}[A-Z0-9]{2}\\.A[0-9]{4}[0-9]{3}\\.h[0-9]{2}v[0-9]{2}\\.[0-9]{3}\\.[0-9]{13}$ example: MCD43A4.A2017006.h21v11.006.2017018074804","title":"Scene ID"},{"location":"#band-per-assetfile","text":"rio-tiler-pds Readers assume that bands (e.g eo:band in STAC) are stored in separate files. $ aws s3 ls landsat-pds/c1/L8/013/031/LC08_L1TP_013031_20130930_20170308_01_T1/ LC08_L1TP_013031_20130930_20170308_01_T1_B1.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B10.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B11.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B2.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B3.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B4.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B5.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B6.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B7.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B8.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B9.TIF LC08_L1TP_013031_20130930_20170308_01_T1_BQA.TIF When reading data or metadata, readers will merge them. e.g with S2L1CReader ( \"S2A_L1C_20170729_19UDP_0\" ) as sentinel : tile , mask = sentinel . tile ( 77 , 89 , 8 , bands = ( \"B01\" , \"B02\" ) assert tile . shape == ( 2 , 256 , 256 ) print ( sentinel . stats ( bands = ( \"B8A\" , \"B02\" ))) > { 'B8A' : { 'pc' : [ 106 , 9322 ], 'min' : 1 , 'max' : 13659 , 'std' : 2682.6511198930048 , 'histogram' : [ [ 261631 , 52188 , 137746 , 98039 , 41066 , 30818 , 21095 , 8631 , 1442 , 105 ], [ 1.0 , 1366.8 , 2732.6 , 4098.4 , 5464.2 , 6830.0 , 8195.8 , 9561.6 , 10927.4 , 12293.199999999999 , 13659.0 ] ] }, 'B02' : { ... } }","title":"Band Per Asset/File"},{"location":"#changes","text":"See CHANGES.md .","title":"Changes"},{"location":"#contribution-development","text":"See CONTRIBUTING.md","title":"Contribution &amp; Development"},{"location":"#license","text":"See LICENSE.txt","title":"License"},{"location":"#authors","text":"The rio-tiler project was begun at Mapbox and has been transferred in January 2019. See AUTHORS.txt for a listing of individual contributors.","title":"Authors"},{"location":"contributing/","text":"Development - Contributing \u00b6 Issues and pull requests are more than welcome: github.com/cogeotiff/rio-tiler-pds/issues dev install $ git clone https://github.com/cogeotiff/rio-tiler-pds.git $ cd rio-tiler-pds $ pip install -e . [ dev ] Python3.7 only This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install Docs \u00b6 pip install rio_tiler_pds[docs] Hot-reloading docs: git clone https://github.com/cogeotiff/rio-tiler-pds cd rio-tiler-pds mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): mkdocs gh-deploy","title":"Development - Contributing"},{"location":"contributing/#development-contributing","text":"Issues and pull requests are more than welcome: github.com/cogeotiff/rio-tiler-pds/issues dev install $ git clone https://github.com/cogeotiff/rio-tiler-pds.git $ cd rio-tiler-pds $ pip install -e . [ dev ] Python3.7 only This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install","title":"Development - Contributing"},{"location":"contributing/#docs","text":"pip install rio_tiler_pds[docs] Hot-reloading docs: git clone https://github.com/cogeotiff/rio-tiler-pds cd rio-tiler-pds mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): mkdocs gh-deploy","title":"Docs"},{"location":"release-notes/","text":"Release Notes \u00b6 0.3.2 (2020-10-13) \u00b6 add TMS options to adapt for rio-tiler 2.0.0b17 (ref: cogeotiff/rio-tiler!285 ) 0.3.1 (2020-10-07) \u00b6 remove pkg_resources ( pypa/setuptools#510 ) 0.3.0 (2020-10-03) \u00b6 Update sentinel2-cogs image path ( cogeotiff/rio-tiler-pds!22 ). Remove ContextManager requirement in base class and update for rio-tiler 2.0b13 ( cogeotiff/rio-tiler!265 ). Add MODIS (PDS and Astraea) dataset ( cogeotiff/rio-tiler-pds#18 ) move reader base classes to rio-tiler ( cogeotiff/rio-tiler-pds#24 ) add missing 0 (e.g \"B1\" -> \"B01\") when user forget it on sentinel and modis band names ( cogeotiff/rio-tiler-pds#25 ) 0.2.1 (2020-09-25) \u00b6 add support for CBERS-4A (author @fredliporace) 0.2.0 (2020-08-31) \u00b6 Revert the use of assets options to bands (#12) from rio_tiler_pds.landsat.aws import L8Reader with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : # in 0.1.1 (PAST) tile , data = landsat . tile ( x , y , z , assets = \"B1\" ) # in 0.2.0 (NOW) tile , data = landsat . tile ( x , y , z , bands = \"B1\" ) 0.1.1 (2020-08-28) \u00b6 avoid nodata options colision with kwargs in L8Reader 0.1.0 (2020-08-27) \u00b6 Initial release. Move code from rio-tiler Update for rio-tiler==2.0b8 (use COGReader and MultiBaseReader) Create new Classes (using attrs) and use ContextManager ( with Reader(\"sceneid\") as scene: ) Remove Landsat 8 pre-collection support Add Sentinel 2 COGs dataset support Use TileInfo.json and ProductInfo.json to retrieve Sentinel 1 & 2 bounds Use assets options instead of bands Add expression options in readers Readers \u00b6 from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.sentinel.aws import S1L1CReader from rio_tiler_pds.sentinel.aws import ( S2L1CReader , # JPEG2000 S2L2AReader , # JPEG2000 S2L2ACOGReader , # COG ) from rio_tiler_pds.cbers.aws import CBERSReader Example \u00b6 from rio_tiler_pds.landsat.aws import L8Reader with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : tile , data = landsat . tile ( x , y , z , assets = \"B1\" ) tile , data = landsat . tile ( x , y , z , expression = \"B1/B2\" )","title":"Release"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#032-2020-10-13","text":"add TMS options to adapt for rio-tiler 2.0.0b17 (ref: cogeotiff/rio-tiler!285 )","title":"0.3.2 (2020-10-13)"},{"location":"release-notes/#031-2020-10-07","text":"remove pkg_resources ( pypa/setuptools#510 )","title":"0.3.1 (2020-10-07)"},{"location":"release-notes/#030-2020-10-03","text":"Update sentinel2-cogs image path ( cogeotiff/rio-tiler-pds!22 ). Remove ContextManager requirement in base class and update for rio-tiler 2.0b13 ( cogeotiff/rio-tiler!265 ). Add MODIS (PDS and Astraea) dataset ( cogeotiff/rio-tiler-pds#18 ) move reader base classes to rio-tiler ( cogeotiff/rio-tiler-pds#24 ) add missing 0 (e.g \"B1\" -> \"B01\") when user forget it on sentinel and modis band names ( cogeotiff/rio-tiler-pds#25 )","title":"0.3.0 (2020-10-03)"},{"location":"release-notes/#021-2020-09-25","text":"add support for CBERS-4A (author @fredliporace)","title":"0.2.1 (2020-09-25)"},{"location":"release-notes/#020-2020-08-31","text":"Revert the use of assets options to bands (#12) from rio_tiler_pds.landsat.aws import L8Reader with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : # in 0.1.1 (PAST) tile , data = landsat . tile ( x , y , z , assets = \"B1\" ) # in 0.2.0 (NOW) tile , data = landsat . tile ( x , y , z , bands = \"B1\" )","title":"0.2.0 (2020-08-31)"},{"location":"release-notes/#011-2020-08-28","text":"avoid nodata options colision with kwargs in L8Reader","title":"0.1.1 (2020-08-28)"},{"location":"release-notes/#010-2020-08-27","text":"Initial release. Move code from rio-tiler Update for rio-tiler==2.0b8 (use COGReader and MultiBaseReader) Create new Classes (using attrs) and use ContextManager ( with Reader(\"sceneid\") as scene: ) Remove Landsat 8 pre-collection support Add Sentinel 2 COGs dataset support Use TileInfo.json and ProductInfo.json to retrieve Sentinel 1 & 2 bounds Use assets options instead of bands Add expression options in readers","title":"0.1.0 (2020-08-27)"},{"location":"release-notes/#readers","text":"from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.sentinel.aws import S1L1CReader from rio_tiler_pds.sentinel.aws import ( S2L1CReader , # JPEG2000 S2L2AReader , # JPEG2000 S2L2ACOGReader , # COG ) from rio_tiler_pds.cbers.aws import CBERSReader","title":"Readers"},{"location":"release-notes/#example","text":"from rio_tiler_pds.landsat.aws import L8Reader with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : tile , data = landsat . tile ( x , y , z , assets = \"B1\" ) tile , data = landsat . tile ( x , y , z , expression = \"B1/B2\" )","title":"Example"},{"location":"usage/","text":"Usage \u00b6 Sentinel 2 - AWS \u00b6 L1C - JPEG2000 \u00b6 bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A from rio_tiler_pds.sentinel.aws import S2L1CReader # We use __enter__ context manager for the Reader. # When creating the instance of `sentinel` the Reader will fetch the sentinel 2 TileInfo.json # to retrieve the bounds of the dataset and other metadata available at `sentinel.tileInfo`. with S2L1CReader ( \"S2A_L1C_20170729_19UDP_0\" ) as sentinel : # bounds and metadata are derived from the tileInfo.json file stored with the JPEG2000 print ( type ( sentinel . tileInfo )) > dict print ( type ( sentinel . datageom )) > dict print ( sentinel . center ) > ( - 69.4190338105916 , 48.25699850457617 , 8 ) print ( sentinel . info ( bands = \"B01\" )) > { 'bounds' : ( - 69.97083660271242 , 47.761069480166974 , - 68.86723101847078 , 48.75292752898536 ), 'center' : ( - 69.4190338105916 , 48.25699850457617 , 8 ), 'minzoom' : 8 , 'maxzoom' : 14 , 'band_metadata' : [( 1 , {})], 'band_descriptions' : [( 1 , 'B01' )], 'dtype' : 'uint16' , 'colorinterp' : [ 'gray' ], 'nodata_type' : 'None' } print ( sentinel . stats ( bands = \"B8A\" )) > { 'B8A' : { 'pc' : [ 106 , 9322 ], 'min' : 1 , 'max' : 13659 , 'std' : 2682.6511198930048 , 'histogram' : [ [ 261631 , 52188 , 137746 , 98039 , 41066 , 30818 , 21095 , 8631 , 1442 , 105 ], [ 1.0 , 1366.8 , 2732.6 , 4098.4 , 5464.2 , 6830.0 , 8195.8 , 9561.6 , 10927.4 , 12293.199999999999 , 13659.0 ] ] } } tile , mask = sentinel . tile ( 77 , 89 , 8 , bands = \"B01\" ) assert tile . shape == ( 1 , 256 , 256 ) print ( sentinel . point ( - 69.41 , 48.25 , bands = ( \"B01\" , \"B02\" ))) # Result is in form of # [ # value for band 1 in band B01, # value for band 1 in band B02 # ] > [ 1230 , 875 ] # Working with Expression tile , mask = sentinel . tile ( 77 , 89 , 8 , expression = \"B01/B02\" ) assert tile . shape == ( 1 , 256 , 256 ) print ( sentinel . point ( - 69.41 , 48.25 , expression = \"B01/B02\" )) > [ 1.424673784104389 ] L2A - JPEG2000 \u00b6 bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A Note: AOT, SCL, WVP bands are not supported. from rio_tiler_pds.sentinel.aws import S2L2AReader with S2L2AReader ( \"S2A_L2A_20170729_19UDP_0\" ) as sentinel : # bounds and metadata are derived from the tileInfo.json file stored with the JPEG2000 print ( type ( sentinel . tileInfo )) > dict print ( type ( sentinel . datageom )) > dict print ( sentinel . info ( bands = \"B01\" )) > { 'bounds' : ( - 69.96945818759949 , 47.7610811323474 , - 68.86723101847078 , 48.75292752898536 ), 'center' : ( - 69.41834460303514 , 48.257004330666376 , 8 ), 'minzoom' : 8 , 'maxzoom' : 14 , 'band_metadata' : [( 1 , {})], 'band_descriptions' : [( 1 , 'B01' )], 'dtype' : 'uint16' , 'colorinterp' : [ 'gray' ], 'nodata_type' : 'None' } COG (Only L2A available for now) \u00b6 bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A Note: AOT, SCL, WVP STAC assets are not supported. from rio_tiler_pds.sentinel.aws import S2COGReader with S2COGReader ( \"S2A_29RKH_20200219_0_L2A\" ) as sentinel : print ( sentinel . bands ) > ( 'B01' , 'B02' , 'B03' , 'B04' , 'B05' , 'B06' , 'B07' , 'B08' , 'B09' , 'B11' , 'B12' , 'B8A' ) # bounds and metadata are derived from the STAC item stored with the COG print ( type ( sentinel . stac_item )) > dict Sentinel 1 - AWS \u00b6 from rio_tiler_pds.sentinel.aws import S1L1CReader with S1L1CReader ( \"S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B\" ) as sentinel : print ( sentinel . bands ) > ( 'vv' , 'vh' ) print ( sentine . bounds ) > ( 75.605247 , 9.225784 , 78.203903 , 11.190425 ) print ( type ( sentinel . productInfo )) > dict print ( sentinel . _get_band_url ( \"vv\" )) > 's3://sentinel-s1-l1c/GRD/2018/7/16/IW/DV/S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B/measurement/iw-vv.tiff' Landsat 8 - AWS \u00b6 Landsat 8 dataset hosted on AWS are not a proper Cloud Optimized GeoTIFF because they have external overviews. To make sure the performance is good enough and limit the number of LIST/GET requests from GDAL/Rasterio, we can set some environment variables: # https://trac.osgeo.org/gdal/wiki/ConfigOptions#CPL_VSIL_CURL_ALLOWED_EXTENSIONS CPL_VSIL_CURL_ALLOWED_EXTENSIONS = .TIF,.ovr # https://trac.osgeo.org/gdal/wiki/ConfigOptions#GDAL_DISABLE_READDIR_ON_OPEN GDAL_DISABLE_READDIR_ON_OPEN = FALSE You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.landsat.aws import L8Reader with rasterio . Env ( CPL_VSIL_CURL_ALLOWED_EXTENSIONS = \".TIF,.ovr\" , GDAL_DISABLE_READDIR_ON_OPEN = \"FALSE\" , ): with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : print ( landsat . bands ) > ( 'B1' , 'B2' , 'B3' , 'B4' , 'B5' , 'B6' , 'B7' , 'B8' , 'B9' , 'B10' , 'B11' , 'BQA' assert landsat . minzoom == 7 assert landsat . minzoom == 12 print ( landsat . spatial_info ) > { 'bounds' : ( - 81.30836 , 32.10539 , - 78.82045 , 34.22818 ), 'center' : ( - 80.064405 , 33.166785000000004 , 7 ), 'minzoom' : 7 , 'maxzoom' : 12 } print ( landsat . info ( bands = \"B1\" )) > { 'bounds' : ( - 81.30836 , 32.10539 , - 78.82045 , 34.22818 ), 'center' : ( - 80.064405 , 33.166785000000004 , 7 ), 'minzoom' : 7 , 'maxzoom' : 12 , 'band_metadata' : [( 1 , {})], 'band_descriptions' : [( 1 , 'B1' )], 'dtype' : 'uint16' , 'colorinterp' : [ 'gray' ], 'nodata_type' : 'None' } print ( landsat . stats ( bands = \"B1\" )) > { 'B1' : { 'pc' : [ 1207 , 6989 ], 'min' : 922 , 'max' : 13512 , 'std' : 297 , 'histogram' : [ [ 574527 , 54320 , 37316 , 25318 , 15086 , 8101 , 3145 , 744 , 160 , 21 ], [ 922 , 2181 , 3440 , 4699 , 5958 , 7217 , 8476 , 9735 , 10994 , 12253 , 13512 ] ] } } tile_z = 8 tile_x = 71 tile_y = 102 tile , mask = landsat . tile ( tile_x , tile_y , tile_z , bands = ( \"B4\" , \"B3\" , \"B2\" )) assert tile . shape == ( 3 , 256 , 256 ) data , mask = landsat . tile ( tile_x , tile_y , tile_z , bands = \"B10\" ) assert data . shape == ( 1 , 256 , 256 ) tile , mask = landsat . tile ( tile_x , tile_y , tile_z , bands = ( \"B4\" , \"B3\" , \"B2\" ), pan = True ) assert tile . shape == ( 3 , 256 , 256 ) tile , mask = landsat . tile ( tile_x , tile_y , tile_z , expression = \"B5*0.8, B4*1.1, B3*0.8\" ) assert tile . shape == ( 3 , 256 , 256 ) data , mask = landsat . preview ( bands = ( \"B4\" , \"B3\" , \"B2\" ), pan = True , width = 256 , height = 256 ) assert data . shape == ( 3 , 256 , 256 ) CBERS 4 - AWS \u00b6 from rio_tiler_pds.cbers.aws import CBERSReader CBERS_MUX_SCENE = \"CBERS_4_MUX_20171121_057_094_L2\" CBERS_AWFI_SCENE = \"CBERS_4_AWFI_20170420_146_129_L2\" CBERS_PAN10M_SCENE = \"CBERS_4_PAN10M_20170427_161_109_L4\" CBERS_PAN5M_SCENE = \"CBERS_4_PAN5M_20170425_153_114_L4\" with CBERSReader ( \"CBERS_4_MUX_20171121_057_094_L2\" ) as cbers : print ( cbers . bands ) > ( 'B5' , 'B6' , 'B7' , 'B8' ) print ( cbers . bounds ) > ( 53.302020833057796 , 4.756472757234311 , 54.628483877373 , 6.025171883475984 ) assert cbers . minzoom == 8 assert cbers . maxzoom == 12 with CBERSReader ( \"CBERS_4_AWFI_20170420_146_129_L2\" ) as cbers : print ( cbers . bands ) > ( 'B13' , 'B14' , 'B15' , 'B16' ) with CBERSReader ( \"CBERS_4_PAN10M_20170427_161_109_L4\" ) as cbers : print ( cbers . bands ) > ( 'B2' , 'B3' , 'B4' ) with CBERSReader ( \"CBERS_4_PAN5M_20170425_153_114_L4\" ) as cbers : print ( cbers . bands ) > ( 'B1' ,) MODIS - AWS \u00b6 PDS (modis-pds bucket) \u00b6 Products : MCD43A4, MOD09GQ, MYD09GQ, MOD09GA, MYD09GA from rio_tiler_pds.modis.aws import MODISPDSReader MCD43A4_SCENE = \"MCD43A4.A2017006.h21v11.006.2017018074804\" with MODISPDSReader ( MCD43A4_SCENE ) as modis : print ( modis . bands ) > ( \"B01\" , \"B01qa\" , \"B02\" , \"B02qa\" , \"B03\" , \"B03qa\" , \"B04\" , \"B04qa\" , \"B05\" , \"B05qa\" , \"B06\" , \"B06qa\" , \"B07\" , \"B07qa\" ) print ( modis . bounds ) > ( 31.9253 , - 30.0 , 46.1976 , - 20.0 ) assert modis . minzoom == 4 assert modis . maxzoom == 9 MOD09GA_SCENE = \"MOD09GA.A2017129.h34v07.006.2017137214839\" with MODISPDSReader ( MOD09GA_SCENE ) as modis : print ( modis . bands ) > ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"geoflags\" , \"granule\" , \"numobs1km\" , \"numobs500m\" , \"obscov\" , \"obsnum\" , \"orbit\" , \"qc500m\" , \"qscan\" , \"range\" , \"senaz\" , \"senzen\" , \"solaz\" , \"solzen\" , \"state\" ) MOD09GQ_SCENE = \"MOD09GQ.A2017120.h29v09.006.2017122031126\" with MODISPDSReader ( MOD09GQ_SCENE ) as modis : print ( modis . bands ) > ( \"B01\" , \"B02\" , \"granule\" , \"numobs\" , \"obscov\" , \"obsnum\" , \"orbit\" , \"qc\" ) ASTRAEA (astraea-opendata bucket) \u00b6 Products : MCD43A4, MOD11A1, MOD13A1, MYD11A1 MYD13A1 from rio_tiler_pds.modis.aws import MODISASTRAEAReader MCD43A4_SCENE = \"MCD43A4.A2017006.h21v11.006.2017018074804\" with MODISASTRAEAReader ( MCD43A4_SCENE ) as modis : print ( modis . bands ) > ( \"B01\" , \"B01qa\" , \"B02\" , \"B02qa\" , \"B03\" , \"B03qa\" , \"B04\" , \"B04qa\" , \"B05\" , \"B05qa\" , \"B06\" , \"B06qa\" , \"B07\" , \"B07qa\" ) print ( modis . bounds ) > ( 31.9253 , - 30.0 , 46.1976 , - 20.0 ) assert modis . minzoom == 4 assert modis . maxzoom == 9 MOD11A1_SCENE = \"MOD11A1.A2020250.h20v11.006.2020251085003\" with MODISASTRAEAReader ( MOD11A1_SCENE ) as modis : print ( modis . bands ) > ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B09\" , \"B10\" , \"B11\" , \"B12\" ) MOD13A1_SCENE = \"MOD13A1.A2020049.h14v04.006.2020066002045\" with MODISASTRAEAReader ( MOD13A1_SCENE ) as modis : print ( modis . bands ) > ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B09\" , \"B10\" , \"B11\" , \"B12\" ) Requester-Pays \u00b6 Some data are stored on AWS requester-pays buckets (you are charged for LIST/GET requests and data transfer outside the bucket region). For those datasets you need to set AWS_REQUEST_PAYER=\"requester\" environement variable to tell AWS S3 that you agree with requester-pays principle. You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.sentinel.aws import S2L1CReader with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with S2L1CReader ( \"S2A_L1C_20170729_19UDP_0\" ) as s2 : print ( s2 . preview ( bands = \"B01\" , width = 64 , height = 64 ))","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#sentinel-2-aws","text":"","title":"Sentinel 2 - AWS"},{"location":"usage/#l1c-jpeg2000","text":"bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A from rio_tiler_pds.sentinel.aws import S2L1CReader # We use __enter__ context manager for the Reader. # When creating the instance of `sentinel` the Reader will fetch the sentinel 2 TileInfo.json # to retrieve the bounds of the dataset and other metadata available at `sentinel.tileInfo`. with S2L1CReader ( \"S2A_L1C_20170729_19UDP_0\" ) as sentinel : # bounds and metadata are derived from the tileInfo.json file stored with the JPEG2000 print ( type ( sentinel . tileInfo )) > dict print ( type ( sentinel . datageom )) > dict print ( sentinel . center ) > ( - 69.4190338105916 , 48.25699850457617 , 8 ) print ( sentinel . info ( bands = \"B01\" )) > { 'bounds' : ( - 69.97083660271242 , 47.761069480166974 , - 68.86723101847078 , 48.75292752898536 ), 'center' : ( - 69.4190338105916 , 48.25699850457617 , 8 ), 'minzoom' : 8 , 'maxzoom' : 14 , 'band_metadata' : [( 1 , {})], 'band_descriptions' : [( 1 , 'B01' )], 'dtype' : 'uint16' , 'colorinterp' : [ 'gray' ], 'nodata_type' : 'None' } print ( sentinel . stats ( bands = \"B8A\" )) > { 'B8A' : { 'pc' : [ 106 , 9322 ], 'min' : 1 , 'max' : 13659 , 'std' : 2682.6511198930048 , 'histogram' : [ [ 261631 , 52188 , 137746 , 98039 , 41066 , 30818 , 21095 , 8631 , 1442 , 105 ], [ 1.0 , 1366.8 , 2732.6 , 4098.4 , 5464.2 , 6830.0 , 8195.8 , 9561.6 , 10927.4 , 12293.199999999999 , 13659.0 ] ] } } tile , mask = sentinel . tile ( 77 , 89 , 8 , bands = \"B01\" ) assert tile . shape == ( 1 , 256 , 256 ) print ( sentinel . point ( - 69.41 , 48.25 , bands = ( \"B01\" , \"B02\" ))) # Result is in form of # [ # value for band 1 in band B01, # value for band 1 in band B02 # ] > [ 1230 , 875 ] # Working with Expression tile , mask = sentinel . tile ( 77 , 89 , 8 , expression = \"B01/B02\" ) assert tile . shape == ( 1 , 256 , 256 ) print ( sentinel . point ( - 69.41 , 48.25 , expression = \"B01/B02\" )) > [ 1.424673784104389 ]","title":"L1C - JPEG2000"},{"location":"usage/#l2a-jpeg2000","text":"bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A Note: AOT, SCL, WVP bands are not supported. from rio_tiler_pds.sentinel.aws import S2L2AReader with S2L2AReader ( \"S2A_L2A_20170729_19UDP_0\" ) as sentinel : # bounds and metadata are derived from the tileInfo.json file stored with the JPEG2000 print ( type ( sentinel . tileInfo )) > dict print ( type ( sentinel . datageom )) > dict print ( sentinel . info ( bands = \"B01\" )) > { 'bounds' : ( - 69.96945818759949 , 47.7610811323474 , - 68.86723101847078 , 48.75292752898536 ), 'center' : ( - 69.41834460303514 , 48.257004330666376 , 8 ), 'minzoom' : 8 , 'maxzoom' : 14 , 'band_metadata' : [( 1 , {})], 'band_descriptions' : [( 1 , 'B01' )], 'dtype' : 'uint16' , 'colorinterp' : [ 'gray' ], 'nodata_type' : 'None' }","title":"L2A - JPEG2000"},{"location":"usage/#cog-only-l2a-available-for-now","text":"bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A Note: AOT, SCL, WVP STAC assets are not supported. from rio_tiler_pds.sentinel.aws import S2COGReader with S2COGReader ( \"S2A_29RKH_20200219_0_L2A\" ) as sentinel : print ( sentinel . bands ) > ( 'B01' , 'B02' , 'B03' , 'B04' , 'B05' , 'B06' , 'B07' , 'B08' , 'B09' , 'B11' , 'B12' , 'B8A' ) # bounds and metadata are derived from the STAC item stored with the COG print ( type ( sentinel . stac_item )) > dict","title":"COG (Only L2A available for now)"},{"location":"usage/#sentinel-1-aws","text":"from rio_tiler_pds.sentinel.aws import S1L1CReader with S1L1CReader ( \"S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B\" ) as sentinel : print ( sentinel . bands ) > ( 'vv' , 'vh' ) print ( sentine . bounds ) > ( 75.605247 , 9.225784 , 78.203903 , 11.190425 ) print ( type ( sentinel . productInfo )) > dict print ( sentinel . _get_band_url ( \"vv\" )) > 's3://sentinel-s1-l1c/GRD/2018/7/16/IW/DV/S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B/measurement/iw-vv.tiff'","title":"Sentinel 1 - AWS"},{"location":"usage/#landsat-8-aws","text":"Landsat 8 dataset hosted on AWS are not a proper Cloud Optimized GeoTIFF because they have external overviews. To make sure the performance is good enough and limit the number of LIST/GET requests from GDAL/Rasterio, we can set some environment variables: # https://trac.osgeo.org/gdal/wiki/ConfigOptions#CPL_VSIL_CURL_ALLOWED_EXTENSIONS CPL_VSIL_CURL_ALLOWED_EXTENSIONS = .TIF,.ovr # https://trac.osgeo.org/gdal/wiki/ConfigOptions#GDAL_DISABLE_READDIR_ON_OPEN GDAL_DISABLE_READDIR_ON_OPEN = FALSE You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.landsat.aws import L8Reader with rasterio . Env ( CPL_VSIL_CURL_ALLOWED_EXTENSIONS = \".TIF,.ovr\" , GDAL_DISABLE_READDIR_ON_OPEN = \"FALSE\" , ): with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : print ( landsat . bands ) > ( 'B1' , 'B2' , 'B3' , 'B4' , 'B5' , 'B6' , 'B7' , 'B8' , 'B9' , 'B10' , 'B11' , 'BQA' assert landsat . minzoom == 7 assert landsat . minzoom == 12 print ( landsat . spatial_info ) > { 'bounds' : ( - 81.30836 , 32.10539 , - 78.82045 , 34.22818 ), 'center' : ( - 80.064405 , 33.166785000000004 , 7 ), 'minzoom' : 7 , 'maxzoom' : 12 } print ( landsat . info ( bands = \"B1\" )) > { 'bounds' : ( - 81.30836 , 32.10539 , - 78.82045 , 34.22818 ), 'center' : ( - 80.064405 , 33.166785000000004 , 7 ), 'minzoom' : 7 , 'maxzoom' : 12 , 'band_metadata' : [( 1 , {})], 'band_descriptions' : [( 1 , 'B1' )], 'dtype' : 'uint16' , 'colorinterp' : [ 'gray' ], 'nodata_type' : 'None' } print ( landsat . stats ( bands = \"B1\" )) > { 'B1' : { 'pc' : [ 1207 , 6989 ], 'min' : 922 , 'max' : 13512 , 'std' : 297 , 'histogram' : [ [ 574527 , 54320 , 37316 , 25318 , 15086 , 8101 , 3145 , 744 , 160 , 21 ], [ 922 , 2181 , 3440 , 4699 , 5958 , 7217 , 8476 , 9735 , 10994 , 12253 , 13512 ] ] } } tile_z = 8 tile_x = 71 tile_y = 102 tile , mask = landsat . tile ( tile_x , tile_y , tile_z , bands = ( \"B4\" , \"B3\" , \"B2\" )) assert tile . shape == ( 3 , 256 , 256 ) data , mask = landsat . tile ( tile_x , tile_y , tile_z , bands = \"B10\" ) assert data . shape == ( 1 , 256 , 256 ) tile , mask = landsat . tile ( tile_x , tile_y , tile_z , bands = ( \"B4\" , \"B3\" , \"B2\" ), pan = True ) assert tile . shape == ( 3 , 256 , 256 ) tile , mask = landsat . tile ( tile_x , tile_y , tile_z , expression = \"B5*0.8, B4*1.1, B3*0.8\" ) assert tile . shape == ( 3 , 256 , 256 ) data , mask = landsat . preview ( bands = ( \"B4\" , \"B3\" , \"B2\" ), pan = True , width = 256 , height = 256 ) assert data . shape == ( 3 , 256 , 256 )","title":"Landsat 8 - AWS"},{"location":"usage/#cbers-4-aws","text":"from rio_tiler_pds.cbers.aws import CBERSReader CBERS_MUX_SCENE = \"CBERS_4_MUX_20171121_057_094_L2\" CBERS_AWFI_SCENE = \"CBERS_4_AWFI_20170420_146_129_L2\" CBERS_PAN10M_SCENE = \"CBERS_4_PAN10M_20170427_161_109_L4\" CBERS_PAN5M_SCENE = \"CBERS_4_PAN5M_20170425_153_114_L4\" with CBERSReader ( \"CBERS_4_MUX_20171121_057_094_L2\" ) as cbers : print ( cbers . bands ) > ( 'B5' , 'B6' , 'B7' , 'B8' ) print ( cbers . bounds ) > ( 53.302020833057796 , 4.756472757234311 , 54.628483877373 , 6.025171883475984 ) assert cbers . minzoom == 8 assert cbers . maxzoom == 12 with CBERSReader ( \"CBERS_4_AWFI_20170420_146_129_L2\" ) as cbers : print ( cbers . bands ) > ( 'B13' , 'B14' , 'B15' , 'B16' ) with CBERSReader ( \"CBERS_4_PAN10M_20170427_161_109_L4\" ) as cbers : print ( cbers . bands ) > ( 'B2' , 'B3' , 'B4' ) with CBERSReader ( \"CBERS_4_PAN5M_20170425_153_114_L4\" ) as cbers : print ( cbers . bands ) > ( 'B1' ,)","title":"CBERS 4 - AWS"},{"location":"usage/#modis-aws","text":"","title":"MODIS - AWS"},{"location":"usage/#pds-modis-pds-bucket","text":"Products : MCD43A4, MOD09GQ, MYD09GQ, MOD09GA, MYD09GA from rio_tiler_pds.modis.aws import MODISPDSReader MCD43A4_SCENE = \"MCD43A4.A2017006.h21v11.006.2017018074804\" with MODISPDSReader ( MCD43A4_SCENE ) as modis : print ( modis . bands ) > ( \"B01\" , \"B01qa\" , \"B02\" , \"B02qa\" , \"B03\" , \"B03qa\" , \"B04\" , \"B04qa\" , \"B05\" , \"B05qa\" , \"B06\" , \"B06qa\" , \"B07\" , \"B07qa\" ) print ( modis . bounds ) > ( 31.9253 , - 30.0 , 46.1976 , - 20.0 ) assert modis . minzoom == 4 assert modis . maxzoom == 9 MOD09GA_SCENE = \"MOD09GA.A2017129.h34v07.006.2017137214839\" with MODISPDSReader ( MOD09GA_SCENE ) as modis : print ( modis . bands ) > ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"geoflags\" , \"granule\" , \"numobs1km\" , \"numobs500m\" , \"obscov\" , \"obsnum\" , \"orbit\" , \"qc500m\" , \"qscan\" , \"range\" , \"senaz\" , \"senzen\" , \"solaz\" , \"solzen\" , \"state\" ) MOD09GQ_SCENE = \"MOD09GQ.A2017120.h29v09.006.2017122031126\" with MODISPDSReader ( MOD09GQ_SCENE ) as modis : print ( modis . bands ) > ( \"B01\" , \"B02\" , \"granule\" , \"numobs\" , \"obscov\" , \"obsnum\" , \"orbit\" , \"qc\" )","title":"PDS (modis-pds bucket)"},{"location":"usage/#astraea-astraea-opendata-bucket","text":"Products : MCD43A4, MOD11A1, MOD13A1, MYD11A1 MYD13A1 from rio_tiler_pds.modis.aws import MODISASTRAEAReader MCD43A4_SCENE = \"MCD43A4.A2017006.h21v11.006.2017018074804\" with MODISASTRAEAReader ( MCD43A4_SCENE ) as modis : print ( modis . bands ) > ( \"B01\" , \"B01qa\" , \"B02\" , \"B02qa\" , \"B03\" , \"B03qa\" , \"B04\" , \"B04qa\" , \"B05\" , \"B05qa\" , \"B06\" , \"B06qa\" , \"B07\" , \"B07qa\" ) print ( modis . bounds ) > ( 31.9253 , - 30.0 , 46.1976 , - 20.0 ) assert modis . minzoom == 4 assert modis . maxzoom == 9 MOD11A1_SCENE = \"MOD11A1.A2020250.h20v11.006.2020251085003\" with MODISASTRAEAReader ( MOD11A1_SCENE ) as modis : print ( modis . bands ) > ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B09\" , \"B10\" , \"B11\" , \"B12\" ) MOD13A1_SCENE = \"MOD13A1.A2020049.h14v04.006.2020066002045\" with MODISASTRAEAReader ( MOD13A1_SCENE ) as modis : print ( modis . bands ) > ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B09\" , \"B10\" , \"B11\" , \"B12\" )","title":"ASTRAEA (astraea-opendata bucket)"},{"location":"usage/#requester-pays","text":"Some data are stored on AWS requester-pays buckets (you are charged for LIST/GET requests and data transfer outside the bucket region). For those datasets you need to set AWS_REQUEST_PAYER=\"requester\" environement variable to tell AWS S3 that you agree with requester-pays principle. You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.sentinel.aws import S2L1CReader with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with S2L1CReader ( \"S2A_L1C_20170729_19UDP_0\" ) as s2 : print ( s2 . preview ( bands = \"B01\" , width = 64 , height = 64 ))","title":"Requester-Pays"},{"location":"API/cbers/","text":"Readers \u00b6 class rio_tiler_pds.cbers.aws.cbers4. CBERSReader ( sceneid , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options=NOTHING , tms=TileMatrixSet(type='TileMatrixSetType', title='Google Maps Compatible for the World', abstract=None, keywords=None, identifier='WebMercatorQuad', supportedCRS=CRS.from_epsg(3857), wellKnownScaleSet=AnyHttpUrl('http://www.opengis.net/def/wkss/OGC/1.0/GoogleMapsCompatible', scheme='http', host='www.opengis.net', tld='net', host_type='domain', path='/def/wkss/OGC/1.0/GoogleMapsCompatible'), boundingBox=BoundingBox(type='BoundingBoxType', crs=CRS.from_epsg(3857), lowerCorner=(-20037508.3427892, -20037508.3427892), upperCorner=(20037508.3427892, 20037508.3427892)), tileMatrix=[TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='0', scaleDenominator=559082264.028717, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1, matrixHeight=1), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='1', scaleDenominator=279541132.014358, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2, matrixHeight=2), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='2', scaleDenominator=139770566.007179, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4, matrixHeight=4), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='3', scaleDenominator=69885283.0035897, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8, matrixHeight=8), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='4', scaleDenominator=34942641.5017948, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16, matrixHeight=16), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='5', scaleDenominator=17471320.7508974, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32, matrixHeight=32), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='6', scaleDenominator=8735660.37544871, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=64, matrixHeight=64), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='7', scaleDenominator=4367830.18772435, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=128, matrixHeight=128), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='8', scaleDenominator=2183915.09386217, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=256, matrixHeight=256), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='9', scaleDenominator=1091957.54693108, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=512, matrixHeight=512), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='10', scaleDenominator=545978.773465544, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1024, matrixHeight=1024), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='11', scaleDenominator=272989.386732772, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2048, matrixHeight=2048), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='12', scaleDenominator=136494.693366386, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4096, matrixHeight=4096), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='13', scaleDenominator=68247.346683193, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8192, matrixHeight=8192), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='14', scaleDenominator=34123.6733415964, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16384, matrixHeight=16384), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='15', scaleDenominator=17061.8366707982, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32768, matrixHeight=32768), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='16', scaleDenominator=8530.91833539913, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=65536, matrixHeight=65536), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='17', scaleDenominator=4265.45916769956, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=131072, matrixHeight=131072), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='18', scaleDenominator=2132.72958384978, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=262144, matrixHeight=262144), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='19', scaleDenominator=1066.36479192489, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=524288, matrixHeight=524288), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='20', scaleDenominator=533.182395962445, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1048576, matrixHeight=1048576), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='21', scaleDenominator=266.591197981222, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2097152, matrixHeight=2097152), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='22', scaleDenominator=133.295598990611, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4194304, matrixHeight=4194304), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='23', scaleDenominator=66.6477994953056, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8388608, matrixHeight=8388608), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='24', scaleDenominator=33.3238997476528, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16777216, matrixHeight=16777216)]) ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset CBERS 4 reader. Parameters tms (TileMatrixSet, optional) \u2014 reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 sceneid (str) \u2014 CBERS 4 sceneid. Attributes bands (tuple) \u2014 list of available bands (default is defined for each sensor). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. maxzoom \u2014 minzoom \u2014 scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Return Dataset's spatial info. Examples >>> with CBERSReader ( 'CBERS_4_AWFI_20170420_146_129_L2' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch Reference band to get the bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method tile_exists ( tile_z , tile_x , tile_y ) \u2192 bool Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method __attrs_post_init__ ( ) Fetch Reference band to get the bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 Utils \u00b6 function rio_tiler_pds.cbers.utils. sceneid_parser ( sceneid ) Parse CBERS 4/4A scene id. Parameters sceneid (str) \u2014 CBERS 4/4A sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidCBERSSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'CBERS_4_MUX_20171121_057_094_L2' )","title":"cbers"},{"location":"API/cbers/#readers","text":"class","title":"Readers"},{"location":"API/cbers/#rio_tiler_pdscbersawscbers4cbersreader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset CBERS 4 reader. Parameters tms (TileMatrixSet, optional) \u2014 reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 sceneid (str) \u2014 CBERS 4 sceneid. Attributes bands (tuple) \u2014 list of available bands (default is defined for each sensor). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. maxzoom \u2014 minzoom \u2014 scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Return Dataset's spatial info. Examples >>> with CBERSReader ( 'CBERS_4_AWFI_20170420_146_129_L2' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch Reference band to get the bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method","title":"rio_tiler_pds.cbers.aws.cbers4.CBERSReader"},{"location":"API/cbers/#rio_tileriobasebasereadertile_exists","text":"Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method","title":"rio_tiler.io.base.BaseReader.tile_exists"},{"location":"API/cbers/#rio_tileriobasemultibandreaderparse_expression","text":"Parse rio-tiler band math expression. Parameters expression (str) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.parse_expression"},{"location":"API/cbers/#rio_tileriobasemultibandreaderinfo","text":"Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.info"},{"location":"API/cbers/#rio_tileriobasemultibandreaderstats","text":"Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.stats"},{"location":"API/cbers/#rio_tileriobasemultibandreadermetadata","text":"Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.metadata"},{"location":"API/cbers/#rio_tileriobasemultibandreadertile","text":"Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.tile"},{"location":"API/cbers/#rio_tileriobasemultibandreaderpart","text":"Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.part"},{"location":"API/cbers/#rio_tileriobasemultibandreaderpreview","text":"Return a preview from multiple bands. Parameters **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.preview"},{"location":"API/cbers/#rio_tileriobasemultibandreaderpoint","text":"Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.point"},{"location":"API/cbers/#rio_tiler_pdscbersawscbers4cbersreaderattrs_post_init","text":"Fetch Reference band to get the bounds. method","title":"rio_tiler_pds.cbers.aws.cbers4.CBERSReader.attrs_post_init"},{"location":"API/cbers/#rio_tiler_pdscbersawscbers4cbersreaderenter","text":"Support using with Context Managers. method","title":"rio_tiler_pds.cbers.aws.cbers4.CBERSReader.enter"},{"location":"API/cbers/#rio_tiler_pdscbersawscbers4cbersreaderexit","text":"Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014","title":"rio_tiler_pds.cbers.aws.cbers4.CBERSReader.exit"},{"location":"API/cbers/#utils","text":"function","title":"Utils"},{"location":"API/cbers/#rio_tiler_pdscbersutilssceneid_parser","text":"Parse CBERS 4/4A scene id. Parameters sceneid (str) \u2014 CBERS 4/4A sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidCBERSSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'CBERS_4_MUX_20171121_057_094_L2' )","title":"rio_tiler_pds.cbers.utils.sceneid_parser"},{"location":"API/landsat/","text":"Readers \u00b6 class rio_tiler_pds.landsat.aws.landsat8. L8Reader ( sceneid , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options=NOTHING , tms=TileMatrixSet(type='TileMatrixSetType', title='Google Maps Compatible for the World', abstract=None, keywords=None, identifier='WebMercatorQuad', supportedCRS=CRS.from_epsg(3857), wellKnownScaleSet=AnyHttpUrl('http://www.opengis.net/def/wkss/OGC/1.0/GoogleMapsCompatible', scheme='http', host='www.opengis.net', tld='net', host_type='domain', path='/def/wkss/OGC/1.0/GoogleMapsCompatible'), boundingBox=BoundingBox(type='BoundingBoxType', crs=CRS.from_epsg(3857), lowerCorner=(-20037508.3427892, -20037508.3427892), upperCorner=(20037508.3427892, 20037508.3427892)), tileMatrix=[TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='0', scaleDenominator=559082264.028717, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1, matrixHeight=1), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='1', scaleDenominator=279541132.014358, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2, matrixHeight=2), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='2', scaleDenominator=139770566.007179, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4, matrixHeight=4), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='3', scaleDenominator=69885283.0035897, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8, matrixHeight=8), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='4', scaleDenominator=34942641.5017948, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16, matrixHeight=16), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='5', scaleDenominator=17471320.7508974, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32, matrixHeight=32), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='6', scaleDenominator=8735660.37544871, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=64, matrixHeight=64), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='7', scaleDenominator=4367830.18772435, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=128, matrixHeight=128), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='8', scaleDenominator=2183915.09386217, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=256, matrixHeight=256), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='9', scaleDenominator=1091957.54693108, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=512, matrixHeight=512), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='10', scaleDenominator=545978.773465544, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1024, matrixHeight=1024), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='11', scaleDenominator=272989.386732772, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2048, matrixHeight=2048), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='12', scaleDenominator=136494.693366386, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4096, matrixHeight=4096), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='13', scaleDenominator=68247.346683193, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8192, matrixHeight=8192), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='14', scaleDenominator=34123.6733415964, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16384, matrixHeight=16384), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='15', scaleDenominator=17061.8366707982, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32768, matrixHeight=32768), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='16', scaleDenominator=8530.91833539913, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=65536, matrixHeight=65536), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='17', scaleDenominator=4265.45916769956, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=131072, matrixHeight=131072), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='18', scaleDenominator=2132.72958384978, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=262144, matrixHeight=262144), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='19', scaleDenominator=1066.36479192489, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=524288, matrixHeight=524288), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='20', scaleDenominator=533.182395962445, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1048576, matrixHeight=1048576), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='21', scaleDenominator=266.591197981222, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2097152, matrixHeight=2097152), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='22', scaleDenominator=133.295598990611, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4194304, matrixHeight=4194304), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='23', scaleDenominator=66.6477994953056, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8388608, matrixHeight=8388608), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='24', scaleDenominator=33.3238997476528, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16777216, matrixHeight=16777216)]) , minzoom=7 , maxzoom=12 ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Landsat 8 reader. Parameters tms (TileMatrixSet, optional) \u2014 reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 sceneid (str) \u2014 Landsat 8 sceneid. minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10', 'B11', 'BQA')). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 12). minzoom (int) \u2014 Dataset's Min Zoom level (default is 7). mtl_metadata (dict) \u2014 Landsat 8 MTL document content. scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Return Dataset's spatial info. Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch MTL metadata and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , pan , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a value from COGs. preview ( bands , expression , band_expression , pan , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , pan , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method tile_exists ( tile_z , tile_x , tile_y ) \u2192 bool Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method __attrs_post_init__ ( ) Fetch MTL metadata and get bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method stats ( pmin=2.0 , pmax=98.0 , hist_options=None , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 hist_options (dict, optional) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , pan=False , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 pan (bool, optional) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , pan=False , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 pan (bool, optional) \u2014 method preview ( bands=None , expression='' , band_expression='' , pan=False , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 pan (bool, optional) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a value from COGs. Parameters lon (float) \u2014 lat (float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 Utils \u00b6 function rio_tiler_pds.landsat.utils. sceneid_parser ( sceneid ) Parse Landsat 8 scene id. Author @perrygeo - www.perrygeo.com Parameters sceneid (str) \u2014 Landsat 8 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidLandsatSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'LC08_L1TP_016037_20170813_20170814_01_RT' )","title":"landsat"},{"location":"API/landsat/#readers","text":"class","title":"Readers"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8reader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Landsat 8 reader. Parameters tms (TileMatrixSet, optional) \u2014 reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 sceneid (str) \u2014 Landsat 8 sceneid. minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10', 'B11', 'BQA')). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 12). minzoom (int) \u2014 Dataset's Min Zoom level (default is 7). mtl_metadata (dict) \u2014 Landsat 8 MTL document content. scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Return Dataset's spatial info. Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch MTL metadata and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , pan , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a value from COGs. preview ( bands , expression , band_expression , pan , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , hist_options , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , pan , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader"},{"location":"API/landsat/#rio_tileriobasebasereadertile_exists","text":"Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method","title":"rio_tiler.io.base.BaseReader.tile_exists"},{"location":"API/landsat/#rio_tileriobasemultibandreaderparse_expression","text":"Parse rio-tiler band math expression. Parameters expression (str) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.parse_expression"},{"location":"API/landsat/#rio_tileriobasemultibandreaderinfo","text":"Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.info"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerattrs_post_init","text":"Fetch MTL metadata and get bounds. method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.attrs_post_init"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerenter","text":"Support using with Context Managers. method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.enter"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerexit","text":"Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.exit"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerstats","text":"Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 hist_options (dict, optional) \u2014 method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.stats"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readermetadata","text":"Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.metadata"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readertile","text":"Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 pan (bool, optional) \u2014 method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.tile"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerpart","text":"Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 pan (bool, optional) \u2014 method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.part"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerpreview","text":"Return a preview from multiple bands. Parameters **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 pan (bool, optional) \u2014 method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.preview"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerpoint","text":"Read a value from COGs. Parameters lon (float) \u2014 lat (float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.point"},{"location":"API/landsat/#utils","text":"function","title":"Utils"},{"location":"API/landsat/#rio_tiler_pdslandsatutilssceneid_parser","text":"Parse Landsat 8 scene id. Author @perrygeo - www.perrygeo.com Parameters sceneid (str) \u2014 Landsat 8 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidLandsatSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'LC08_L1TP_016037_20170813_20170814_01_RT' )","title":"rio_tiler_pds.landsat.utils.sceneid_parser"},{"location":"API/modis/","text":"MODIS PDS \u00b6 class rio_tiler_pds.modis.aws.modis_pds. MODISReader ( sceneid , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options=NOTHING , tms=TileMatrixSet(type='TileMatrixSetType', title='Google Maps Compatible for the World', abstract=None, keywords=None, identifier='WebMercatorQuad', supportedCRS=CRS.from_epsg(3857), wellKnownScaleSet=AnyHttpUrl('http://www.opengis.net/def/wkss/OGC/1.0/GoogleMapsCompatible', scheme='http', host='www.opengis.net', tld='net', host_type='domain', path='/def/wkss/OGC/1.0/GoogleMapsCompatible'), boundingBox=BoundingBox(type='BoundingBoxType', crs=CRS.from_epsg(3857), lowerCorner=(-20037508.3427892, -20037508.3427892), upperCorner=(20037508.3427892, 20037508.3427892)), tileMatrix=[TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='0', scaleDenominator=559082264.028717, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1, matrixHeight=1), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='1', scaleDenominator=279541132.014358, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2, matrixHeight=2), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='2', scaleDenominator=139770566.007179, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4, matrixHeight=4), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='3', scaleDenominator=69885283.0035897, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8, matrixHeight=8), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='4', scaleDenominator=34942641.5017948, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16, matrixHeight=16), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='5', scaleDenominator=17471320.7508974, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32, matrixHeight=32), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='6', scaleDenominator=8735660.37544871, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=64, matrixHeight=64), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='7', scaleDenominator=4367830.18772435, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=128, matrixHeight=128), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='8', scaleDenominator=2183915.09386217, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=256, matrixHeight=256), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='9', scaleDenominator=1091957.54693108, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=512, matrixHeight=512), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='10', scaleDenominator=545978.773465544, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1024, matrixHeight=1024), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='11', scaleDenominator=272989.386732772, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2048, matrixHeight=2048), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='12', scaleDenominator=136494.693366386, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4096, matrixHeight=4096), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='13', scaleDenominator=68247.346683193, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8192, matrixHeight=8192), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='14', scaleDenominator=34123.6733415964, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16384, matrixHeight=16384), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='15', scaleDenominator=17061.8366707982, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32768, matrixHeight=32768), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='16', scaleDenominator=8530.91833539913, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=65536, matrixHeight=65536), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='17', scaleDenominator=4265.45916769956, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=131072, matrixHeight=131072), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='18', scaleDenominator=2132.72958384978, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=262144, matrixHeight=262144), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='19', scaleDenominator=1066.36479192489, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=524288, matrixHeight=524288), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='20', scaleDenominator=533.182395962445, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1048576, matrixHeight=1048576), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='21', scaleDenominator=266.591197981222, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2097152, matrixHeight=2097152), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='22', scaleDenominator=133.295598990611, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4194304, matrixHeight=4194304), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='23', scaleDenominator=66.6477994953056, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8388608, matrixHeight=8388608), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='24', scaleDenominator=33.3238997476528, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16777216, matrixHeight=16777216)]) , minzoom=4 , maxzoom=9 ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset MODIS reader. Parameters tms (TileMatrixSet, optional) \u2014 reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 sceneid (str) \u2014 MODIS sceneid. minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is defined for each sensor). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Return Dataset's spatial info. Examples >>> with MODISReader ( 'MCD43A4.A2017006.h21v11.006.2017018074804' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Parse Sceneid and get grid bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method tile_exists ( tile_z , tile_x , tile_y ) \u2192 bool Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method __attrs_post_init__ ( ) Parse Sceneid and get grid bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 MODIS ASTRAEA \u00b6 class rio_tiler_pds.modis.aws.modis_astraea. MODISReader ( sceneid , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options=NOTHING , tms=TileMatrixSet(type='TileMatrixSetType', title='Google Maps Compatible for the World', abstract=None, keywords=None, identifier='WebMercatorQuad', supportedCRS=CRS.from_epsg(3857), wellKnownScaleSet=AnyHttpUrl('http://www.opengis.net/def/wkss/OGC/1.0/GoogleMapsCompatible', scheme='http', host='www.opengis.net', tld='net', host_type='domain', path='/def/wkss/OGC/1.0/GoogleMapsCompatible'), boundingBox=BoundingBox(type='BoundingBoxType', crs=CRS.from_epsg(3857), lowerCorner=(-20037508.3427892, -20037508.3427892), upperCorner=(20037508.3427892, 20037508.3427892)), tileMatrix=[TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='0', scaleDenominator=559082264.028717, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1, matrixHeight=1), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='1', scaleDenominator=279541132.014358, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2, matrixHeight=2), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='2', scaleDenominator=139770566.007179, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4, matrixHeight=4), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='3', scaleDenominator=69885283.0035897, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8, matrixHeight=8), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='4', scaleDenominator=34942641.5017948, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16, matrixHeight=16), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='5', scaleDenominator=17471320.7508974, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32, matrixHeight=32), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='6', scaleDenominator=8735660.37544871, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=64, matrixHeight=64), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='7', scaleDenominator=4367830.18772435, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=128, matrixHeight=128), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='8', scaleDenominator=2183915.09386217, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=256, matrixHeight=256), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='9', scaleDenominator=1091957.54693108, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=512, matrixHeight=512), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='10', scaleDenominator=545978.773465544, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1024, matrixHeight=1024), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='11', scaleDenominator=272989.386732772, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2048, matrixHeight=2048), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='12', scaleDenominator=136494.693366386, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4096, matrixHeight=4096), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='13', scaleDenominator=68247.346683193, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8192, matrixHeight=8192), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='14', scaleDenominator=34123.6733415964, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16384, matrixHeight=16384), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='15', scaleDenominator=17061.8366707982, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32768, matrixHeight=32768), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='16', scaleDenominator=8530.91833539913, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=65536, matrixHeight=65536), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='17', scaleDenominator=4265.45916769956, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=131072, matrixHeight=131072), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='18', scaleDenominator=2132.72958384978, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=262144, matrixHeight=262144), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='19', scaleDenominator=1066.36479192489, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=524288, matrixHeight=524288), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='20', scaleDenominator=533.182395962445, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1048576, matrixHeight=1048576), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='21', scaleDenominator=266.591197981222, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2097152, matrixHeight=2097152), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='22', scaleDenominator=133.295598990611, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4194304, matrixHeight=4194304), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='23', scaleDenominator=66.6477994953056, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8388608, matrixHeight=8388608), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='24', scaleDenominator=33.3238997476528, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16777216, matrixHeight=16777216)]) , minzoom=4 , maxzoom=9 ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset MODIS reader. Parameters tms (TileMatrixSet, optional) \u2014 reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 sceneid (str) \u2014 MODIS sceneid. minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is defined for each sensor). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Return Dataset's spatial info. Examples >>> with MODISReader ( 'MCD43A4.A2017006.h21v11.006.2017018074804' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Parse Sceneid and get grid bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method tile_exists ( tile_z , tile_x , tile_y ) \u2192 bool Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method __attrs_post_init__ ( ) Parse Sceneid and get grid bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 Utils \u00b6 function rio_tiler_pds.modis.utils. sceneid_parser ( sceneid ) Parse MODIS scene id. Parameters sceneid (str) \u2014 Sentinel-2 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidMODISSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'MCD43A4.A2017006.h21v11.006.2017018074804' )","title":"modis"},{"location":"API/modis/#modis-pds","text":"class","title":"MODIS PDS"},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_pdsmodisreader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset MODIS reader. Parameters tms (TileMatrixSet, optional) \u2014 reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 sceneid (str) \u2014 MODIS sceneid. minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is defined for each sensor). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Return Dataset's spatial info. Examples >>> with MODISReader ( 'MCD43A4.A2017006.h21v11.006.2017018074804' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Parse Sceneid and get grid bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method","title":"rio_tiler_pds.modis.aws.modis_pds.MODISReader"},{"location":"API/modis/#rio_tileriobasebasereadertile_exists","text":"Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method","title":"rio_tiler.io.base.BaseReader.tile_exists"},{"location":"API/modis/#rio_tileriobasemultibandreaderparse_expression","text":"Parse rio-tiler band math expression. Parameters expression (str) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.parse_expression"},{"location":"API/modis/#rio_tileriobasemultibandreaderinfo","text":"Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.info"},{"location":"API/modis/#rio_tileriobasemultibandreaderstats","text":"Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.stats"},{"location":"API/modis/#rio_tileriobasemultibandreadermetadata","text":"Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.metadata"},{"location":"API/modis/#rio_tileriobasemultibandreadertile","text":"Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.tile"},{"location":"API/modis/#rio_tileriobasemultibandreaderpart","text":"Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.part"},{"location":"API/modis/#rio_tileriobasemultibandreaderpreview","text":"Return a preview from multiple bands. Parameters **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.preview"},{"location":"API/modis/#rio_tileriobasemultibandreaderpoint","text":"Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.point"},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_pdsmodisreaderattrs_post_init","text":"Parse Sceneid and get grid bounds. method","title":"rio_tiler_pds.modis.aws.modis_pds.MODISReader.attrs_post_init"},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_pdsmodisreaderenter","text":"Support using with Context Managers. method","title":"rio_tiler_pds.modis.aws.modis_pds.MODISReader.enter"},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_pdsmodisreaderexit","text":"Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014","title":"rio_tiler_pds.modis.aws.modis_pds.MODISReader.exit"},{"location":"API/modis/#modis-astraea","text":"class","title":"MODIS ASTRAEA"},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_astraeamodisreader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset MODIS reader. Parameters tms (TileMatrixSet, optional) \u2014 reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 sceneid (str) \u2014 MODIS sceneid. minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is defined for each sensor). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Return Dataset's spatial info. Examples >>> with MODISReader ( 'MCD43A4.A2017006.h21v11.006.2017018074804' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Parse Sceneid and get grid bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method","title":"rio_tiler_pds.modis.aws.modis_astraea.MODISReader"},{"location":"API/modis/#rio_tileriobasebasereadertile_exists_1","text":"Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method","title":"rio_tiler.io.base.BaseReader.tile_exists"},{"location":"API/modis/#rio_tileriobasemultibandreaderparse_expression_1","text":"Parse rio-tiler band math expression. Parameters expression (str) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.parse_expression"},{"location":"API/modis/#rio_tileriobasemultibandreaderinfo_1","text":"Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.info"},{"location":"API/modis/#rio_tileriobasemultibandreaderstats_1","text":"Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.stats"},{"location":"API/modis/#rio_tileriobasemultibandreadermetadata_1","text":"Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.metadata"},{"location":"API/modis/#rio_tileriobasemultibandreadertile_1","text":"Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.tile"},{"location":"API/modis/#rio_tileriobasemultibandreaderpart_1","text":"Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.part"},{"location":"API/modis/#rio_tileriobasemultibandreaderpreview_1","text":"Return a preview from multiple bands. Parameters **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.preview"},{"location":"API/modis/#rio_tileriobasemultibandreaderpoint_1","text":"Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 **kwargs (any) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.point"},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_astraeamodisreaderattrs_post_init","text":"Parse Sceneid and get grid bounds. method","title":"rio_tiler_pds.modis.aws.modis_astraea.MODISReader.attrs_post_init"},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_astraeamodisreaderenter","text":"Support using with Context Managers. method","title":"rio_tiler_pds.modis.aws.modis_astraea.MODISReader.enter"},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_astraeamodisreaderexit","text":"Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014","title":"rio_tiler_pds.modis.aws.modis_astraea.MODISReader.exit"},{"location":"API/modis/#utils","text":"function","title":"Utils"},{"location":"API/modis/#rio_tiler_pdsmodisutilssceneid_parser","text":"Parse MODIS scene id. Parameters sceneid (str) \u2014 Sentinel-2 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidMODISSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'MCD43A4.A2017006.h21v11.006.2017018074804' )","title":"rio_tiler_pds.modis.utils.sceneid_parser"},{"location":"API/sentinel/","text":"Readers \u00b6 module rio_tiler_pds.sentinel.aws. sentinel1 AWS Sentinel 1 reader. Classes S1L1CReader \u2014 AWS Public Dataset Sentinel 1 reader. class rio_tiler_pds.sentinel.aws.sentinel1. S1L1CReader ( sceneid , reader=<class 'rio_tiler.io.cogeo.GCPCOGReader'> , reader_options={'nodata': 0} , tms=TileMatrixSet(type='TileMatrixSetType', title='Google Maps Compatible for the World', abstract=None, keywords=None, identifier='WebMercatorQuad', supportedCRS=CRS.from_epsg(3857), wellKnownScaleSet=AnyHttpUrl('http://www.opengis.net/def/wkss/OGC/1.0/GoogleMapsCompatible', scheme='http', host='www.opengis.net', tld='net', host_type='domain', path='/def/wkss/OGC/1.0/GoogleMapsCompatible'), boundingBox=BoundingBox(type='BoundingBoxType', crs=CRS.from_epsg(3857), lowerCorner=(-20037508.3427892, -20037508.3427892), upperCorner=(20037508.3427892, 20037508.3427892)), tileMatrix=[TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='0', scaleDenominator=559082264.028717, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1, matrixHeight=1), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='1', scaleDenominator=279541132.014358, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2, matrixHeight=2), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='2', scaleDenominator=139770566.007179, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4, matrixHeight=4), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='3', scaleDenominator=69885283.0035897, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8, matrixHeight=8), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='4', scaleDenominator=34942641.5017948, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16, matrixHeight=16), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='5', scaleDenominator=17471320.7508974, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32, matrixHeight=32), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='6', scaleDenominator=8735660.37544871, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=64, matrixHeight=64), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='7', scaleDenominator=4367830.18772435, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=128, matrixHeight=128), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='8', scaleDenominator=2183915.09386217, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=256, matrixHeight=256), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='9', scaleDenominator=1091957.54693108, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=512, matrixHeight=512), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='10', scaleDenominator=545978.773465544, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1024, matrixHeight=1024), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='11', scaleDenominator=272989.386732772, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2048, matrixHeight=2048), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='12', scaleDenominator=136494.693366386, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4096, matrixHeight=4096), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='13', scaleDenominator=68247.346683193, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8192, matrixHeight=8192), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='14', scaleDenominator=34123.6733415964, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16384, matrixHeight=16384), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='15', scaleDenominator=17061.8366707982, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32768, matrixHeight=32768), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='16', scaleDenominator=8530.91833539913, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=65536, matrixHeight=65536), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='17', scaleDenominator=4265.45916769956, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=131072, matrixHeight=131072), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='18', scaleDenominator=2132.72958384978, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=262144, matrixHeight=262144), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='19', scaleDenominator=1066.36479192489, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=524288, matrixHeight=524288), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='20', scaleDenominator=533.182395962445, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1048576, matrixHeight=1048576), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='21', scaleDenominator=266.591197981222, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2097152, matrixHeight=2097152), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='22', scaleDenominator=133.295598990611, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4194304, matrixHeight=4194304), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='23', scaleDenominator=66.6477994953056, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8388608, matrixHeight=8388608), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='24', scaleDenominator=33.3238997476528, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16777216, matrixHeight=16777216)]) , minzoom=8 , maxzoom=14 ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 1 reader. Parameters sceneid (str) \u2014 Sentinel-1 sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 tms (TileMatrixSet, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('vv', 'vh')). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. datageom (dict) \u2014 sentinel 1 data geometry. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). productInfo (dict) \u2014 sentinel 1 productInfo.json content. scene_params \u2014 spatial_info (dict) \u2014 Return Dataset's spatial info. Examples >>> with S1L1CReader ( 'S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch productInfo and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method tile_exists ( tile_z , tile_x , tile_y ) \u2192 bool Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __attrs_post_init__ ( ) Fetch productInfo and get bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 module rio_tiler_pds.sentinel.aws. sentinel2 AWS Sentinel 2 readers. Attributes SENTINEL_L2_BANDS \u2014 SENTINEL_L2_PRODUCTS \u2014 default_l1c_bands \u2014 default_l2a_bands \u2014 Classes S2L1CReader \u2014 AWS Public Dataset Sentinel 2 L1C reader. S2L2AReader \u2014 AWS Public Dataset Sentinel 2 L2A reader. S2COGReader \u2014 AWS Public Dataset Sentinel 2 COGS reader. class rio_tiler_pds.sentinel.aws.sentinel2. S2L1CReader ( sceneid , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options={'nodata': 0} , tms=TileMatrixSet(type='TileMatrixSetType', title='Google Maps Compatible for the World', abstract=None, keywords=None, identifier='WebMercatorQuad', supportedCRS=CRS.from_epsg(3857), wellKnownScaleSet=AnyHttpUrl('http://www.opengis.net/def/wkss/OGC/1.0/GoogleMapsCompatible', scheme='http', host='www.opengis.net', tld='net', host_type='domain', path='/def/wkss/OGC/1.0/GoogleMapsCompatible'), boundingBox=BoundingBox(type='BoundingBoxType', crs=CRS.from_epsg(3857), lowerCorner=(-20037508.3427892, -20037508.3427892), upperCorner=(20037508.3427892, 20037508.3427892)), tileMatrix=[TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='0', scaleDenominator=559082264.028717, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1, matrixHeight=1), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='1', scaleDenominator=279541132.014358, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2, matrixHeight=2), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='2', scaleDenominator=139770566.007179, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4, matrixHeight=4), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='3', scaleDenominator=69885283.0035897, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8, matrixHeight=8), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='4', scaleDenominator=34942641.5017948, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16, matrixHeight=16), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='5', scaleDenominator=17471320.7508974, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32, matrixHeight=32), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='6', scaleDenominator=8735660.37544871, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=64, matrixHeight=64), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='7', scaleDenominator=4367830.18772435, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=128, matrixHeight=128), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='8', scaleDenominator=2183915.09386217, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=256, matrixHeight=256), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='9', scaleDenominator=1091957.54693108, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=512, matrixHeight=512), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='10', scaleDenominator=545978.773465544, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1024, matrixHeight=1024), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='11', scaleDenominator=272989.386732772, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2048, matrixHeight=2048), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='12', scaleDenominator=136494.693366386, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4096, matrixHeight=4096), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='13', scaleDenominator=68247.346683193, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8192, matrixHeight=8192), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='14', scaleDenominator=34123.6733415964, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16384, matrixHeight=16384), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='15', scaleDenominator=17061.8366707982, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32768, matrixHeight=32768), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='16', scaleDenominator=8530.91833539913, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=65536, matrixHeight=65536), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='17', scaleDenominator=4265.45916769956, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=131072, matrixHeight=131072), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='18', scaleDenominator=2132.72958384978, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=262144, matrixHeight=262144), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='19', scaleDenominator=1066.36479192489, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=524288, matrixHeight=524288), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='20', scaleDenominator=533.182395962445, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1048576, matrixHeight=1048576), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='21', scaleDenominator=266.591197981222, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2097152, matrixHeight=2097152), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='22', scaleDenominator=133.295598990611, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4194304, matrixHeight=4194304), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='23', scaleDenominator=66.6477994953056, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8388608, matrixHeight=8388608), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='24', scaleDenominator=33.3238997476528, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16777216, matrixHeight=16777216)]) , minzoom=8 , maxzoom=14 ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 2 L1C reader. Parameters sceneid (str) \u2014 Sentinel-2 L1C sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 tms (TileMatrixSet, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. datageom (dict) \u2014 sentinel 2 data geometry. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Return Dataset's spatial info. tileInfo (dict) \u2014 sentinel 2 tileInfo.json content. Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch productInfo and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method tile_exists ( tile_z , tile_x , tile_y ) \u2192 bool Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __attrs_post_init__ ( ) Fetch productInfo and get bounds. class rio_tiler_pds.sentinel.aws.sentinel2. S2L2AReader ( sceneid , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options={'nodata': 0} , tms=TileMatrixSet(type='TileMatrixSetType', title='Google Maps Compatible for the World', abstract=None, keywords=None, identifier='WebMercatorQuad', supportedCRS=CRS.from_epsg(3857), wellKnownScaleSet=AnyHttpUrl('http://www.opengis.net/def/wkss/OGC/1.0/GoogleMapsCompatible', scheme='http', host='www.opengis.net', tld='net', host_type='domain', path='/def/wkss/OGC/1.0/GoogleMapsCompatible'), boundingBox=BoundingBox(type='BoundingBoxType', crs=CRS.from_epsg(3857), lowerCorner=(-20037508.3427892, -20037508.3427892), upperCorner=(20037508.3427892, 20037508.3427892)), tileMatrix=[TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='0', scaleDenominator=559082264.028717, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1, matrixHeight=1), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='1', scaleDenominator=279541132.014358, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2, matrixHeight=2), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='2', scaleDenominator=139770566.007179, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4, matrixHeight=4), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='3', scaleDenominator=69885283.0035897, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8, matrixHeight=8), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='4', scaleDenominator=34942641.5017948, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16, matrixHeight=16), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='5', scaleDenominator=17471320.7508974, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32, matrixHeight=32), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='6', scaleDenominator=8735660.37544871, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=64, matrixHeight=64), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='7', scaleDenominator=4367830.18772435, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=128, matrixHeight=128), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='8', scaleDenominator=2183915.09386217, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=256, matrixHeight=256), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='9', scaleDenominator=1091957.54693108, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=512, matrixHeight=512), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='10', scaleDenominator=545978.773465544, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1024, matrixHeight=1024), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='11', scaleDenominator=272989.386732772, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2048, matrixHeight=2048), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='12', scaleDenominator=136494.693366386, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4096, matrixHeight=4096), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='13', scaleDenominator=68247.346683193, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8192, matrixHeight=8192), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='14', scaleDenominator=34123.6733415964, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16384, matrixHeight=16384), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='15', scaleDenominator=17061.8366707982, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32768, matrixHeight=32768), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='16', scaleDenominator=8530.91833539913, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=65536, matrixHeight=65536), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='17', scaleDenominator=4265.45916769956, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=131072, matrixHeight=131072), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='18', scaleDenominator=2132.72958384978, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=262144, matrixHeight=262144), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='19', scaleDenominator=1066.36479192489, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=524288, matrixHeight=524288), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='20', scaleDenominator=533.182395962445, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1048576, matrixHeight=1048576), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='21', scaleDenominator=266.591197981222, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2097152, matrixHeight=2097152), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='22', scaleDenominator=133.295598990611, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4194304, matrixHeight=4194304), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='23', scaleDenominator=66.6477994953056, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8388608, matrixHeight=8388608), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='24', scaleDenominator=33.3238997476528, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16777216, matrixHeight=16777216)]) , minzoom=8 , maxzoom=14 ) Bases rio_tiler_pds.sentinel.aws.sentinel2.S2L1CReader rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 2 L2A reader. Parameters sceneid (str) \u2014 Sentinel-2 L2A sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 tms (TileMatrixSet, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')). center (float, float, int) \u2014 Dataset center + minzoom. spatial_info (dict) \u2014 Return Dataset's spatial info. Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch productInfo and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method tile_exists ( tile_z , tile_x , tile_y ) \u2192 bool Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __attrs_post_init__ ( ) Fetch productInfo and get bounds. class rio_tiler_pds.sentinel.aws.sentinel2. S2COGReader ( sceneid , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options=NOTHING , tms=TileMatrixSet(type='TileMatrixSetType', title='Google Maps Compatible for the World', abstract=None, keywords=None, identifier='WebMercatorQuad', supportedCRS=CRS.from_epsg(3857), wellKnownScaleSet=AnyHttpUrl('http://www.opengis.net/def/wkss/OGC/1.0/GoogleMapsCompatible', scheme='http', host='www.opengis.net', tld='net', host_type='domain', path='/def/wkss/OGC/1.0/GoogleMapsCompatible'), boundingBox=BoundingBox(type='BoundingBoxType', crs=CRS.from_epsg(3857), lowerCorner=(-20037508.3427892, -20037508.3427892), upperCorner=(20037508.3427892, 20037508.3427892)), tileMatrix=[TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='0', scaleDenominator=559082264.028717, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1, matrixHeight=1), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='1', scaleDenominator=279541132.014358, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2, matrixHeight=2), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='2', scaleDenominator=139770566.007179, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4, matrixHeight=4), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='3', scaleDenominator=69885283.0035897, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8, matrixHeight=8), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='4', scaleDenominator=34942641.5017948, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16, matrixHeight=16), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='5', scaleDenominator=17471320.7508974, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32, matrixHeight=32), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='6', scaleDenominator=8735660.37544871, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=64, matrixHeight=64), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='7', scaleDenominator=4367830.18772435, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=128, matrixHeight=128), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='8', scaleDenominator=2183915.09386217, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=256, matrixHeight=256), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='9', scaleDenominator=1091957.54693108, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=512, matrixHeight=512), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='10', scaleDenominator=545978.773465544, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1024, matrixHeight=1024), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='11', scaleDenominator=272989.386732772, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2048, matrixHeight=2048), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='12', scaleDenominator=136494.693366386, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4096, matrixHeight=4096), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='13', scaleDenominator=68247.346683193, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8192, matrixHeight=8192), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='14', scaleDenominator=34123.6733415964, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16384, matrixHeight=16384), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='15', scaleDenominator=17061.8366707982, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=32768, matrixHeight=32768), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='16', scaleDenominator=8530.91833539913, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=65536, matrixHeight=65536), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='17', scaleDenominator=4265.45916769956, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=131072, matrixHeight=131072), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='18', scaleDenominator=2132.72958384978, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=262144, matrixHeight=262144), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='19', scaleDenominator=1066.36479192489, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=524288, matrixHeight=524288), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='20', scaleDenominator=533.182395962445, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=1048576, matrixHeight=1048576), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='21', scaleDenominator=266.591197981222, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=2097152, matrixHeight=2097152), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='22', scaleDenominator=133.295598990611, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=4194304, matrixHeight=4194304), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='23', scaleDenominator=66.6477994953056, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=8388608, matrixHeight=8388608), TileMatrix(type='TileMatrixType', title=None, abstract=None, keywords=None, identifier='24', scaleDenominator=33.3238997476528, topLeftCorner=(-20037508.3427892, 20037508.3427892), tileWidth=256, tileHeight=256, matrixWidth=16777216, matrixHeight=16777216)]) , minzoom=8 , maxzoom=14 ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 2 COGS reader. Parameters sceneid (str) \u2014 Sentinel-2 sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 tms (TileMatrixSet, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (defined by the STAC item.json). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Return Dataset's spatial info. stac_item (dict) \u2014 sentinel 2 COG STAC item content. Examples >>> with S2COGReader ( 'S2A_29RKH_20200219_0_L2A' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch item.json and get bounds and bands. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method tile_exists ( tile_z , tile_x , tile_y ) \u2192 bool Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __attrs_post_init__ ( ) Fetch item.json and get bounds and bands. Utils \u00b6 function rio_tiler_pds.sentinel.utils. s2_sceneid_parser ( sceneid ) Parse Sentinel 2 scene id. Parameters sceneid (str) \u2014 Sentinel-2 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidSentinelSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> s2_sceneid_parser ( 'S2A_L1C_20170729_19UDP_0' ) >>> s2_sceneid_parser ( 'S2A_L2A_20170729_19UDP_0' ) >>> s2_sceneid_parser ( 'S2A_29RKH_20200219_0_L2A' ) function rio_tiler_pds.sentinel.utils. s1_sceneid_parser ( sceneid ) Parse Sentinel 1 scene id. Parameters sceneid (str) \u2014 Sentinel-1 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidSentinelSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> s1_sceneid_parser ( 'S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B' )","title":"sentinel"},{"location":"API/sentinel/#readers","text":"module","title":"Readers"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel1","text":"AWS Sentinel 1 reader. Classes S1L1CReader \u2014 AWS Public Dataset Sentinel 1 reader. class","title":"rio_tiler_pds.sentinel.aws.sentinel1"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel1s1l1creader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 1 reader. Parameters sceneid (str) \u2014 Sentinel-1 sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 tms (TileMatrixSet, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('vv', 'vh')). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. datageom (dict) \u2014 sentinel 1 data geometry. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). productInfo (dict) \u2014 sentinel 1 productInfo.json content. scene_params \u2014 spatial_info (dict) \u2014 Return Dataset's spatial info. Examples >>> with S1L1CReader ( 'S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch productInfo and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method tile_exists ( tile_z , tile_x , tile_y ) \u2192 bool Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __attrs_post_init__ ( ) Fetch productInfo and get bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 module","title":"rio_tiler_pds.sentinel.aws.sentinel1.S1L1CReader"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2","text":"AWS Sentinel 2 readers. Attributes SENTINEL_L2_BANDS \u2014 SENTINEL_L2_PRODUCTS \u2014 default_l1c_bands \u2014 default_l2a_bands \u2014 Classes S2L1CReader \u2014 AWS Public Dataset Sentinel 2 L1C reader. S2L2AReader \u2014 AWS Public Dataset Sentinel 2 L2A reader. S2COGReader \u2014 AWS Public Dataset Sentinel 2 COGS reader. class","title":"rio_tiler_pds.sentinel.aws.sentinel2"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2l1creader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 2 L1C reader. Parameters sceneid (str) \u2014 Sentinel-2 L1C sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 tms (TileMatrixSet, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. datageom (dict) \u2014 sentinel 2 data geometry. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Return Dataset's spatial info. tileInfo (dict) \u2014 sentinel 2 tileInfo.json content. Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch productInfo and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method tile_exists ( tile_z , tile_x , tile_y ) \u2192 bool Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __attrs_post_init__ ( ) Fetch productInfo and get bounds. class","title":"rio_tiler_pds.sentinel.aws.sentinel2.S2L1CReader"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2l2areader","text":"Bases rio_tiler_pds.sentinel.aws.sentinel2.S2L1CReader rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 2 L2A reader. Parameters sceneid (str) \u2014 Sentinel-2 L2A sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 tms (TileMatrixSet, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')). center (float, float, int) \u2014 Dataset center + minzoom. spatial_info (dict) \u2014 Return Dataset's spatial info. Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch productInfo and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method tile_exists ( tile_z , tile_x , tile_y ) \u2192 bool Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __attrs_post_init__ ( ) Fetch productInfo and get bounds. class","title":"rio_tiler_pds.sentinel.aws.sentinel2.S2L2AReader"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2cogreader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.BaseReader AWS Public Dataset Sentinel 2 COGS reader. Parameters sceneid (str) \u2014 Sentinel-2 sceneid. reader (type of BaseReader, optional) \u2014 reader_options (dict, optional) \u2014 tms (TileMatrixSet, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (defined by the STAC item.json). bounds \u2014 center (float, float, int) \u2014 Dataset center + minzoom. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). scene_params (dict) \u2014 scene id parameters. spatial_info (dict) \u2014 Return Dataset's spatial info. stac_item (dict) \u2014 sentinel 2 COG STAC item content. Examples >>> with S2COGReader ( 'S2A_29RKH_20200219_0_L2A' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch item.json and get bounds and bands. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands metadata ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return metadata from multiple bands parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , band_expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands, preview ( bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Return a preview from multiple bands. stats ( pmin , pmax , bands , **kwargs ) (dict) \u2014 Return array statistics from multiple bands tile ( tile_x , tile_y , tile_z , bands , expression , band_expression , **kwargs ) (ndarray, ndarray) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_z , tile_x , tile_y ) (bool) \u2014 Check if a tile is inside a the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method tile_exists ( tile_z , tile_x , tile_y ) \u2192 bool Check if a tile is inside a the dataset bounds. Parameters tile_z (int) \u2014 tile_x (int) \u2014 tile_y (int) \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters bands (Union(sequence of str, str), optional) \u2014 *args \u2014 **kwargs (any) \u2014 method stats ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return array statistics from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method metadata ( pmin=2.0 , pmax=98.0 , bands=None , **kwargs ) \u2192 dict Return metadata from multiple bands Parameters pmin (float, optional) \u2014 pmax (float, optional) \u2014 bands (Union(sequence of str, str), optional) \u2014 **kwargs (any) \u2014 method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 tile_y (int) \u2014 tile_z (int) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method part ( bbox , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method preview ( bands=None , expression='' , band_expression='' , **kwargs ) \u2192 (ndarray, ndarray) Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method point ( lon , lat , bands=None , expression='' , band_expression='' , **kwargs ) \u2192 list Read a pixel values from multiple bands, Parameters lon (float) \u2014 lat (float) \u2014 bands (Union(sequence of str, str), optional) \u2014 expression (str, optional) \u2014 band_expression (str, optional) \u2014 **kwargs (any) \u2014 method __attrs_post_init__ ( ) Fetch item.json and get bounds and bands.","title":"rio_tiler_pds.sentinel.aws.sentinel2.S2COGReader"},{"location":"API/sentinel/#utils","text":"function","title":"Utils"},{"location":"API/sentinel/#rio_tiler_pdssentinelutilss2_sceneid_parser","text":"Parse Sentinel 2 scene id. Parameters sceneid (str) \u2014 Sentinel-2 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidSentinelSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> s2_sceneid_parser ( 'S2A_L1C_20170729_19UDP_0' ) >>> s2_sceneid_parser ( 'S2A_L2A_20170729_19UDP_0' ) >>> s2_sceneid_parser ( 'S2A_29RKH_20200219_0_L2A' ) function","title":"rio_tiler_pds.sentinel.utils.s2_sceneid_parser"},{"location":"API/sentinel/#rio_tiler_pdssentinelutilss1_sceneid_parser","text":"Parse Sentinel 1 scene id. Parameters sceneid (str) \u2014 Sentinel-1 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidSentinelSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> s1_sceneid_parser ( 'S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B' )","title":"rio_tiler_pds.sentinel.utils.s1_sceneid_parser"}]}